
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://github.githubassets.com">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">



  <meta name="viewport" content="initial-scale=1.0,user-scalable=no,maximum-scale=1,width=device-width">
  <meta name="selected-link" value="repo_source">

  
<meta name="octolytics-dimension-device" content="mobile" />
<meta name="octolytics-dimension-user_id" content="1466797" /><meta name="octolytics-dimension-user_login" content="slevithan" /><meta name="octolytics-dimension-repository_id" content="4269180" /><meta name="octolytics-dimension-repository_nwo" content="slevithan/regex-colorizer" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="4269180" /><meta name="octolytics-dimension-repository_network_root_nwo" content="slevithan/regex-colorizer" /><meta name="octolytics-dimension-repository_explore_github_marketplace_ci_cta_shown" content="false" />


<meta name="octolytics-host" content="collector.githubapp.com" /><meta name="octolytics-app-id" content="github" /><meta name="octolytics-event-url" content="https://collector.githubapp.com/github-external/browser_event" /><meta name="octolytics-dimension-request_id" content="C6E8:1AF6:708CB2:E10176:5C769A0A" /><meta name="octolytics-dimension-region_edge" content="iad" /><meta name="octolytics-dimension-region_render" content="iad" /><meta name="octolytics-actor-id" content="24961188" /><meta name="octolytics-actor-login" content="RSwarnkar" /><meta name="octolytics-actor-hash" content="b79c2b09c0dc4e94ed72baa9d5cd87d74bea2eb55a540775931b4d5fa2f3a547" />
<meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true" />



    <meta name="google-analytics" content="UA-3769691-2">

  <meta class="js-ga-set" name="userId" content="af789c61952d3870c47e3d0079edff60">

<meta class="js-ga-set" name="dimension1" content="Logged In">

  <meta class="js-ga-set" name="dimension3" content="mobile">


  

  <title>regex-colorizer/regex-colorizer.js at master Â· slevithan/regex-colorizer</title>

  <link crossorigin="anonymous" media="all" integrity="sha512-wFHp2ZXXGLqfByw2V94ChY9QTOpWKDKXZr9/WvSJ6Kj9jA3RMiBKi+grFogSSkvYyz2WqArvXeutZXTVlO4J0g==" rel="stylesheet" href="https://github.githubassets.com/assets/mobile-a4a260831cf619b317e8b47bc97632de.css" />


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://github.githubassets.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" class="js-site-favicon" href="https://github.githubassets.com/favicon.ico">

<meta name="theme-color" content="#1e2327">


  <meta name="u2f-support" content="true">


  <link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="page-responsive">
    


  <header class="Header f5 lh-default clearfix">
    <div class="p-responsive flex-justify-between">
        <div class="d-flex flex-justify-between flex-items-center position-absolute right-0 left-0 px-3 mt-1">
          <div class="d-flex mx-2"><!-- placeholder for hamburger --></div>
          <div class="px-3 overflow-hidden">
                <div class="css-truncate css-truncate-target width-fit">
    <svg class="octicon octicon-repo" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
    <strong>
      <a class="text-white" href="/slevithan">slevithan</a>
    </strong> /
    <strong>
      <a class="text-white" href="/slevithan/regex-colorizer">regex-colorizer</a>
    </strong>
  </div>

          </div>

          <div class="d-flex">
            
              <a class="position-relative notification-indicator ml-3" href="/notifications"
                    aria-label="You have no unread notifications"
                  data-ga-click="Mobile, tap, location:header; text:Notifications">
                <span class="mail-status "></span>
                <svg height="16" class="octicon octicon-bell" viewBox="0 0 14 16" version="1.1" width="14" aria-hidden="true"><path fill-rule="evenodd" d="M14 12v1H0v-1l.73-.58c.77-.77.81-2.55 1.19-4.42C2.69 3.23 6 2 6 2c0-.55.45-1 1-1s1 .45 1 1c0 0 3.39 1.23 4.16 5 .38 1.88.42 3.66 1.19 4.42l.66.58H14zm-7 4c1.11 0 2-.89 2-2H5c0 1.11.89 2 2 2z"/></svg>
              </a>
          </div>
        </div>


        <details class="details-reset">
          <summary class="mt-1 float-left position-relative user-select-none" data-ga-click="Mobile, tap, location:header; text:Hamburger">
            <svg height="24" class="octicon octicon-three-bars notification-indicator" viewBox="0 0 12 16" version="1.1" width="18" aria-hidden="true"><path fill-rule="evenodd" d="M11.41 9H.59C0 9 0 8.59 0 8c0-.59 0-1 .59-1H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1h.01zm0-4H.59C0 5 0 4.59 0 4c0-.59 0-1 .59-1H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1h.01zM.59 11H11.4c.59 0 .59.41.59 1 0 .59 0 1-.59 1H.59C0 13 0 12.59 0 12c0-.59 0-1 .59-1z"/></svg>
          </summary>
              <div style="clear: both;">
        <div class="py-3">
          <div class="header-search scoped-search site-scoped-search js-site-search position-relative "
  role="search"
>
  <div class="position-relative">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-site-search-form" data-scope-type="Repository" data-scope-id="4269180" data-scoped-search-url="/slevithan/regex-colorizer/search" data-unscoped-search-url="/search" action="/slevithan/regex-colorizer/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
      <label class="form-control header-search-wrapper  js-chromeless-input-container">
            <a class="header-search-scope no-underline" href="/slevithan/regex-colorizer/blob/master/regex-colorizer.js">This repository</a>
        <input type="text"
          class="form-control header-search-input  js-site-search-focus js-site-search-field is-clearable"
          data-hotkey="s,/"
          name="q"
          value=""
          placeholder="Search"
          data-unscoped-placeholder="Search GitHub"
          data-scoped-placeholder="Search"
          autocapitalize="off"
          aria-label="Search this repository"
          >
          <input type="hidden" class="js-site-search-type-field" name="type" >
      </label>
</form>  </div>
</div>

        </div>
      <ul class="text-bold list-style-none p-0 m-0">
            <li>
              <a href="/" data-ga-click="Mobile, tap, location:header; text:Dashboard" class="js-selected-navigation-item HeaderNavlink py-2 mt-3">
                Dashboard
              </a>
            </li>
            <li>
              <a class="js-selected-navigation-item HeaderNavlink py-2" href="/pulls">
                Pull requests
</a>            </li>
            <li>
              <a class="js-selected-navigation-item HeaderNavlink py-2" href="/issues">
                Issues
</a>            </li>
              <li>
                <a class="js-selected-navigation-item HeaderNavlink py-2" data-ga-click="Mobile, tap, location:header; text:Marketplace" href="/marketplace">
                  Marketplace
</a>              </li>
          <li>
            <a href="/explore" data-ga-click="Mobile, tap, location:header; text:Explore" class="js-selected-navigation-item HeaderNavlink py-2">
              Explore
            </a>
          </li>
            <li>
              <a href="/RSwarnkar" data-ga-click="Mobile, tap, location:header; text:User avatar" class="js-selected-navigation-item HeaderNavlink py-2">
                <img class="avatar" src="https://avatars3.githubusercontent.com/u/24961188?s=40&amp;v=4" width="20" height="20" alt="@RSwarnkar" />
                RSwarnkar
              </a>
            </li>
            <li>
              <a href="/logout" data-ga-click="Mobile, tap, location:header; text:Sign out" class="HeaderNavlink py-2" style="padding-left: 2px;">
                <svg style="margin-right: 2px;" class="octicon octicon-sign-out v-align-middle" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 9V7H8V5h4V3l4 3-4 3zm-2 3H6V3L2 1h8v3h1V1c0-.55-.45-1-1-1H1C.45 0 0 .45 0 1v11.38c0 .39.22.73.55.91L6 16.01V13h4c.55 0 1-.45 1-1V8h-1v4z"/></svg>
                Sign out
              </a>
            </li>
      </ul>
    </div>

        </details>
    </div>
  </header>

    



    




<div class="reponav-wrapper lh-default">
  <nav class="reponav js-reponav"
       itemscope
       itemtype="http://schema.org/BreadcrumbList">

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a class="js-selected-navigation-item selected reponav-item" itemprop="url" aria-current="page" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages /slevithan/regex-colorizer" href="/slevithan/regex-colorizer">
        <span itemprop="name">Code</span>
        <meta itemprop="position" content="1">
</a>    </span>

      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_issues repo_labels repo_milestones /slevithan/regex-colorizer/issues" href="/slevithan/regex-colorizer/issues">
          <span itemprop="name">Issues</span>
          <span class="Counter">3</span>
          <meta itemprop="position" content="2">
</a>      </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_pulls checks /slevithan/regex-colorizer/pulls" href="/slevithan/regex-colorizer/pulls">
        <span itemprop="name">Pull requests</span>
        <span class="Counter">1</span>
        <meta itemprop="position" content="3">
</a>    </span>

      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links=" /slevithan/regex-colorizer/projects" href="/slevithan/regex-colorizer/projects">
          <span itemprop="name">Projects</span>
          <span class="Counter">0</span>
          <meta itemprop="position" content="4">
</a>      </span>

      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links=" /slevithan/regex-colorizer/wiki" href="/slevithan/regex-colorizer/wiki">
          <span itemprop="name">Wiki</span>
          <meta itemprop="position" content="5">
</a>      </span>

      <a class="js-selected-navigation-item reponav-item" data-selected-links="pulse /slevithan/regex-colorizer/pulse" href="/slevithan/regex-colorizer/pulse">
        Pulse
</a>
      <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
        <a class="js-selected-navigation-item reponav-item" data-selected-links="community /slevithan/regex-colorizer/community" href="/slevithan/regex-colorizer/community">
          Community
</a>      </span>

  </nav>
</div>

<div id="js-flash-container">

</div>




<div class="breadcrumb blob-breadcrumb">
  <label for="blob-history-checkbox" class="blob-history-label">
    <svg class="octicon octicon-history" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 13H6V6h5v2H8v5zM7 1C4.81 1 2.87 2.02 1.59 3.59L0 2v4h4L2.5 4.5C3.55 3.17 5.17 2.3 7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-.34.03-.67.09-1H.08C.03 7.33 0 7.66 0 8c0 3.86 3.14 7 7 7s7-3.14 7-7-3.14-7-7-7z"/></svg>
  </label>
  <span class="filetype-icon"><svg aria-label="file" class="octicon octicon-file" viewBox="0 0 12 16" version="1.1" width="12" height="16" role="img"><path fill-rule="evenodd" d="M6 5H2V4h4v1zM2 8h7V7H2v1zm0 2h7V9H2v1zm0 2h7v-1H2v1zm10-7.5V14c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1V2c0-.55.45-1 1-1h7.5L12 4.5zM11 5L8 2H1v12h10V5z"/></svg></span>
  <strong class="final-path">regex-colorizer.js</strong>
</div>


<input id="blob-history-checkbox"
       class="js-blob-history-checkbox blob-history-checkbox"
       type="checkbox"
       data-url="/slevithan/regex-colorizer/latest_commit/master/regex-colorizer.js">

<div class="blob-history">
  <a class="js-blob-history-link" href="/slevithan/regex-colorizer/commits/master/regex-colorizer.js">
    Loading latest commitâ¦
</a></div>

<div class="bg-white">
    <div class="blob-file-content js-file-line-container">
      <div class="highlighted-blob tab-size" data-tab-size="8"><div class="code-body highlight"><pre><div class='line js-file-line' id='LC1'><span class="pl-c"><span class="pl-c">/*</span>! Regex Colorizer v0.3.1</span></div><div class='line js-file-line' id='LC2'><span class="pl-c"> * (c) 2010-2012 Steven Levithan &lt;http://stevenlevithan.com/regex/colorizer/&gt;</span></div><div class='line js-file-line' id='LC3'><span class="pl-c"> * MIT license</span></div><div class='line js-file-line' id='LC4'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC5'><br></div><div class='line js-file-line' id='LC6'><span class="pl-c"><span class="pl-c">/*</span> v0.1 of this script was extracted from RegexPal v0.1.4 and named &#39;JavaScript Regex Syntax</span></div><div class='line js-file-line' id='LC7'><span class="pl-c"> * Highlighter&#39;. The name changed to Regex Colorizer in v0.2. Currently supports JavaScript (with</span></div><div class='line js-file-line' id='LC8'><span class="pl-c"> * web reality) regex syntax only.</span></div><div class='line js-file-line' id='LC9'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC10'><br></div><div class='line js-file-line' id='LC11'><span class="pl-k">var</span> RegexColorizer <span class="pl-k">=</span> (<span class="pl-k">function</span> () {</div><div class='line js-file-line' id='LC12'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>use strict<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC13'><br></div><div class='line js-file-line' id='LC14'><span class="pl-c"><span class="pl-c">/*</span>--------------------------------------</span></div><div class='line js-file-line' id='LC15'><span class="pl-c"> *  Private variables</span></div><div class='line js-file-line' id='LC16'><span class="pl-c"> *------------------------------------<span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC17'><br></div><div class='line js-file-line' id='LC18'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> self <span class="pl-k">=</span> {},</div><div class='line js-file-line' id='LC19'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regexToken <span class="pl-k">=</span><span class="pl-sr"> <span class="pl-pds">/</span><span class="pl-cce">\[\^</span><span class="pl-k">?</span>]<span class="pl-k">?</span>(?:<span class="pl-c1">[<span class="pl-k">^</span><span class="pl-cce">\\\]</span>]</span><span class="pl-k">+</span><span class="pl-k">|</span><span class="pl-cce">\\</span><span class="pl-c1">[<span class="pl-c1">\S\s</span>]</span><span class="pl-k">?</span>)<span class="pl-k">*</span>]<span class="pl-k">?</span><span class="pl-k">|</span><span class="pl-cce">\\</span>(?:0(?:<span class="pl-c1">[<span class="pl-c1">0-3</span>][<span class="pl-c1">0-7</span>]</span><span class="pl-k">{0,2}</span><span class="pl-k">|</span><span class="pl-c1">[<span class="pl-c1">4-7</span>][<span class="pl-c1">0-7</span>]</span><span class="pl-k">?</span>)<span class="pl-k">?</span><span class="pl-k">|</span><span class="pl-c1">[<span class="pl-c1">1-9</span>][<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span><span class="pl-k">|</span>x<span class="pl-c1">[<span class="pl-c1">0-9A-Fa-f</span>]</span><span class="pl-k">{2}</span><span class="pl-k">|</span>u<span class="pl-c1">[<span class="pl-c1">0-9A-Fa-f</span>]</span><span class="pl-k">{4}</span><span class="pl-k">|</span>c<span class="pl-c1">[<span class="pl-c1">A-Za-z</span>]</span><span class="pl-k">|</span><span class="pl-c1">[<span class="pl-c1">\S\s</span>]</span><span class="pl-k">?</span>)<span class="pl-k">|</span><span class="pl-cce">\(</span>(?:<span class="pl-cce">\?</span><span class="pl-c1">[:=!]</span><span class="pl-k">?</span>)<span class="pl-k">?</span><span class="pl-k">|</span>(?:<span class="pl-c1">[?*+]</span><span class="pl-k">|</span><span class="pl-cce">\{</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>(?:,<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span>)<span class="pl-k">?</span><span class="pl-cce">\}</span>)<span class="pl-cce">\?</span><span class="pl-k">?</span><span class="pl-k">|</span><span class="pl-c1">[<span class="pl-k">^</span><span class="pl-c1">.</span>?*+^${[()|<span class="pl-cce">\\</span>]</span><span class="pl-k">+</span><span class="pl-k">|</span><span class="pl-c1">.</span><span class="pl-pds">/</span>g</span>,</div><div class='line js-file-line' id='LC20'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;charClassToken <span class="pl-k">=</span><span class="pl-sr"> <span class="pl-pds">/</span><span class="pl-c1">[<span class="pl-k">^</span><span class="pl-cce">\\</span>-]</span><span class="pl-k">+</span><span class="pl-k">|</span>-<span class="pl-k">|</span><span class="pl-cce">\\</span>(?:<span class="pl-c1">[<span class="pl-c1">0-3</span>][<span class="pl-c1">0-7</span>]</span><span class="pl-k">{0,2}</span><span class="pl-k">|</span><span class="pl-c1">[<span class="pl-c1">4-7</span>][<span class="pl-c1">0-7</span>]</span><span class="pl-k">?</span><span class="pl-k">|</span>x<span class="pl-c1">[<span class="pl-c1">0-9A-Fa-f</span>]</span><span class="pl-k">{2}</span><span class="pl-k">|</span>u<span class="pl-c1">[<span class="pl-c1">0-9A-Fa-f</span>]</span><span class="pl-k">{4}</span><span class="pl-k">|</span>c<span class="pl-c1">[<span class="pl-c1">A-Za-z</span>]</span><span class="pl-k">|</span><span class="pl-c1">[<span class="pl-c1">\S\s</span>]</span><span class="pl-k">?</span>)<span class="pl-pds">/</span>g</span>,</div><div class='line js-file-line' id='LC21'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;charClassParts <span class="pl-k">=</span><span class="pl-sr"> <span class="pl-pds">/</span><span class="pl-k">^</span>(<span class="pl-cce">\[\^</span><span class="pl-k">?</span>)(]<span class="pl-k">?</span>(?:<span class="pl-c1">[<span class="pl-k">^</span><span class="pl-cce">\\\]</span>]</span><span class="pl-k">+</span><span class="pl-k">|</span><span class="pl-cce">\\</span><span class="pl-c1">[<span class="pl-c1">\S\s</span>]</span><span class="pl-k">?</span>)<span class="pl-k">*</span>)(]<span class="pl-k">?</span>)<span class="pl-k">$</span><span class="pl-pds">/</span></span>,</div><div class='line js-file-line' id='LC22'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quantifier <span class="pl-k">=</span><span class="pl-sr"> <span class="pl-pds">/</span><span class="pl-k">^</span>(?:<span class="pl-c1">[?*+]</span><span class="pl-k">|</span><span class="pl-cce">\{</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>(?:,<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span>)<span class="pl-k">?</span><span class="pl-cce">\}</span>)<span class="pl-cce">\?</span><span class="pl-k">?</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>,</div><div class='line js-file-line' id='LC23'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC24'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">NONE</span><span class="pl-k">:</span> <span class="pl-c1">0</span>,</div><div class='line js-file-line' id='LC25'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">RANGE_HYPHEN</span><span class="pl-k">:</span> <span class="pl-c1">1</span>,</div><div class='line js-file-line' id='LC26'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">SHORT_CLASS</span><span class="pl-k">:</span> <span class="pl-c1">2</span>,</div><div class='line js-file-line' id='LC27'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">ALTERNATOR</span><span class="pl-k">:</span> <span class="pl-c1">3</span></div><div class='line js-file-line' id='LC28'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</div><div class='line js-file-line' id='LC29'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC30'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">UNCLOSED_CLASS</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Unclosed character class<span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC31'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">INCOMPLETE_TOKEN</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Incomplete regex token<span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC32'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">INVALID_RANGE</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Reversed or invalid range<span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC33'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">INVALID_GROUP_TYPE</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Invalid or unsupported group type<span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC34'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">UNBALANCED_LEFT_PAREN</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Unclosed grouping<span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC35'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">UNBALANCED_RIGHT_PAREN</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>No matching opening parenthesis<span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC36'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">INTERVAL_OVERFLOW</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Interval quantifier cannot use value over 65,535<span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC37'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">INTERVAL_REVERSED</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Interval quantifier range is reversed<span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC38'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">UNQUANTIFIABLE</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Quantifiers must be preceded by a token that can be repeated<span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC39'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">IMPROPER_EMPTY_ALTERNATIVE</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Empty alternative effectively truncates the regex here<span class="pl-pds">&quot;</span></span></div><div class='line js-file-line' id='LC40'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC41'><br></div><div class='line js-file-line' id='LC42'><span class="pl-c"><span class="pl-c">/*</span>--------------------------------------</span></div><div class='line js-file-line' id='LC43'><span class="pl-c"> *  Private helper functions</span></div><div class='line js-file-line' id='LC44'><span class="pl-c"> *------------------------------------<span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC45'><br></div><div class='line js-file-line' id='LC46'><span class="pl-c"><span class="pl-c">/**</span></span></div><div class='line js-file-line' id='LC47'><span class="pl-c"> * Returns HTML for error highlighting.</span></div><div class='line js-file-line' id='LC48'><span class="pl-c"> * <span class="pl-k">@private</span></span></div><div class='line js-file-line' id='LC49'><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{String}</span> <span class="pl-smi">str</span> Pattern to apply error highlighting to.</span></div><div class='line js-file-line' id='LC50'><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{String}</span> <span class="pl-smi">[desc]</span> Error description.</span></div><div class='line js-file-line' id='LC51'><span class="pl-c"> * <span class="pl-k">@returns</span> <span class="pl-en">{String}</span> HTML for error highlighting.</span></div><div class='line js-file-line' id='LC52'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC53'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">function</span> <span class="pl-en">errorize</span>(<span class="pl-smi">str</span>, <span class="pl-smi">desc</span>) {</div><div class='line js-file-line' id='LC54'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&lt;b class=&quot;err&quot;<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> (desc <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">&#39;</span> title=&quot;<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> desc <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-pds">&#39;</span></span>) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&gt;<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> str <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&lt;/b&gt;<span class="pl-pds">&#39;</span></span>;</div><div class='line js-file-line' id='LC55'>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC56'><br></div><div class='line js-file-line' id='LC57'><span class="pl-c"><span class="pl-c">/**</span></span></div><div class='line js-file-line' id='LC58'><span class="pl-c"> * Returns HTML for group highlighting.</span></div><div class='line js-file-line' id='LC59'><span class="pl-c"> * <span class="pl-k">@private</span></span></div><div class='line js-file-line' id='LC60'><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{String}</span> <span class="pl-smi">str</span> Pattern to apply group highlighting to.</span></div><div class='line js-file-line' id='LC61'><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{Number}</span> <span class="pl-smi">depth</span> Group nesting depth.</span></div><div class='line js-file-line' id='LC62'><span class="pl-c"> * <span class="pl-k">@returns</span> <span class="pl-en">{String}</span> HTML for group highlighting.</span></div><div class='line js-file-line' id='LC63'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC64'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">function</span> <span class="pl-en">groupize</span>(<span class="pl-smi">str</span>, <span class="pl-smi">depth</span>) {</div><div class='line js-file-line' id='LC65'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&lt;b class=&quot;g<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> depth <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;&gt;<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> str <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&lt;/b&gt;<span class="pl-pds">&#39;</span></span>;</div><div class='line js-file-line' id='LC66'>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC67'><br></div><div class='line js-file-line' id='LC68'><span class="pl-c"><span class="pl-c">/**</span></span></div><div class='line js-file-line' id='LC69'><span class="pl-c"> * Expands &amp;, &lt;, and &gt; characters in the provided string to HTML entities &amp;amp;, &amp;lt;, and &amp;gt;.</span></div><div class='line js-file-line' id='LC70'><span class="pl-c"> * <span class="pl-k">@private</span></span></div><div class='line js-file-line' id='LC71'><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{String}</span> <span class="pl-smi">str</span> String with characters to expand.</span></div><div class='line js-file-line' id='LC72'><span class="pl-c"> * <span class="pl-k">@returns</span> <span class="pl-en">{String}</span> String with characters expanded.</span></div><div class='line js-file-line' id='LC73'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC74'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">function</span> <span class="pl-en">expandHtmlEntities</span>(<span class="pl-smi">str</span>) {</div><div class='line js-file-line' id='LC75'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> <span class="pl-smi">str</span>.<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span>&amp;<span class="pl-pds">/</span>g</span>, <span class="pl-s"><span class="pl-pds">&quot;</span>&amp;amp;<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span>&lt;<span class="pl-pds">/</span>g</span>, <span class="pl-s"><span class="pl-pds">&quot;</span>&amp;lt;<span class="pl-pds">&quot;</span></span>).<span class="pl-c1">replace</span>(<span class="pl-sr"><span class="pl-pds">/</span>&gt;<span class="pl-pds">/</span>g</span>, <span class="pl-s"><span class="pl-pds">&quot;</span>&amp;gt;<span class="pl-pds">&quot;</span></span>);</div><div class='line js-file-line' id='LC76'>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC77'><br></div><div class='line js-file-line' id='LC78'><span class="pl-c"><span class="pl-c">/**</span></span></div><div class='line js-file-line' id='LC79'><span class="pl-c"> * Returns a set of elements within the page body that have the given class name.</span></div><div class='line js-file-line' id='LC80'><span class="pl-c"> * <span class="pl-k">@private</span></span></div><div class='line js-file-line' id='LC81'><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{String}</span> <span class="pl-smi">cls</span> Class name.</span></div><div class='line js-file-line' id='LC82'><span class="pl-c"> * <span class="pl-k">@returns</span> <span class="pl-en">{NodeList|HTMLCollection|Array}</span> Set of elements.</span></div><div class='line js-file-line' id='LC83'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC84'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">function</span> <span class="pl-en">elsByClass</span>(<span class="pl-smi">cls</span>) {</div><div class='line js-file-line' id='LC85'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-c1">document</span>.<span class="pl-smi">getElementsByClassName</span>) {</div><div class='line js-file-line' id='LC86'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> <span class="pl-c1">document</span>.<span class="pl-c1">body</span>.<span class="pl-c1">getElementsByClassName</span>(cls);</div><div class='line js-file-line' id='LC87'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC88'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> els <span class="pl-k">=</span> <span class="pl-c1">document</span>.<span class="pl-c1">body</span>.<span class="pl-c1">getElementsByTagName</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>*<span class="pl-pds">&quot;</span></span>),</div><div class='line js-file-line' id='LC89'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regex <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">RegExp</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>(?:^|<span class="pl-cce">\\</span>s)<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> cls <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>(?:<span class="pl-cce">\\</span>s|$)<span class="pl-pds">&quot;</span></span>),</div><div class='line js-file-line' id='LC90'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result <span class="pl-k">=</span> [],</div><div class='line js-file-line' id='LC91'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len <span class="pl-k">=</span> <span class="pl-smi">els</span>.<span class="pl-c1">length</span>,</div><div class='line js-file-line' id='LC92'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i;</div><div class='line js-file-line' id='LC93'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> (i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> len; i<span class="pl-k">++</span>) {</div><div class='line js-file-line' id='LC94'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">regex</span>.<span class="pl-c1">test</span>(els[i].<span class="pl-c1">className</span>)) {</div><div class='line js-file-line' id='LC95'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">result</span>.<span class="pl-c1">push</span>(els[i]);</div><div class='line js-file-line' id='LC96'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC97'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC98'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> result;</div><div class='line js-file-line' id='LC99'>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC100'><br></div><div class='line js-file-line' id='LC101'><span class="pl-c"><span class="pl-c">/**</span></span></div><div class='line js-file-line' id='LC102'><span class="pl-c"> * Returns the character code for the provided regex token. Supports tokens used within character</span></div><div class='line js-file-line' id='LC103'><span class="pl-c"> * classes only, since that&#39;s all it&#39;s currently needed for.</span></div><div class='line js-file-line' id='LC104'><span class="pl-c"> * <span class="pl-k">@private</span></span></div><div class='line js-file-line' id='LC105'><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{String}</span> <span class="pl-smi">token</span> Regex token.</span></div><div class='line js-file-line' id='LC106'><span class="pl-c"> * <span class="pl-k">@returns</span> <span class="pl-en">{Number}</span> Character code of the provided token, or NaN.</span></div><div class='line js-file-line' id='LC107'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC108'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">function</span> <span class="pl-en">getTokenCharCode</span>(<span class="pl-smi">token</span>) {</div><div class='line js-file-line' id='LC109'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Escape sequence</span></div><div class='line js-file-line' id='LC110'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">token</span>.<span class="pl-c1">length</span> <span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">token</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span><span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC111'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> t <span class="pl-k">=</span> <span class="pl-smi">token</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">1</span>);</div><div class='line js-file-line' id='LC112'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Control character</span></div><div class='line js-file-line' id='LC113'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>c<span class="pl-c1">[<span class="pl-c1">A-Za-z</span>]</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">test</span>(t)) {</div><div class='line js-file-line' id='LC114'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&quot;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">indexOf</span>(<span class="pl-smi">t</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">1</span>).<span class="pl-c1">toUpperCase</span>()) <span class="pl-k">+</span> <span class="pl-c1">1</span>;</div><div class='line js-file-line' id='LC115'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC116'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Two or four digit hexadecimal character code</span></div><div class='line js-file-line' id='LC117'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(?:x<span class="pl-c1">[<span class="pl-c1">0-9A-Fa-f</span>]</span><span class="pl-k">{2}</span><span class="pl-k">|</span>u<span class="pl-c1">[<span class="pl-c1">0-9A-Fa-f</span>]</span><span class="pl-k">{4}</span>)<span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">test</span>(t)) {</div><div class='line js-file-line' id='LC118'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> <span class="pl-c1">parseInt</span>(<span class="pl-smi">t</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">1</span>), <span class="pl-c1">16</span>);</div><div class='line js-file-line' id='LC119'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC120'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> One to three digit octal character code up to 377 (0xFF)</span></div><div class='line js-file-line' id='LC121'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span>(?:<span class="pl-c1">[<span class="pl-c1">0-3</span>][<span class="pl-c1">0-7</span>]</span><span class="pl-k">{0,2}</span><span class="pl-k">|</span><span class="pl-c1">[<span class="pl-c1">4-7</span>][<span class="pl-c1">0-7</span>]</span><span class="pl-k">?</span>)<span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">test</span>(t)) {</div><div class='line js-file-line' id='LC122'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> <span class="pl-c1">parseInt</span>(t, <span class="pl-c1">8</span>);</div><div class='line js-file-line' id='LC123'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC124'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Shorthand class or incomplete token</span></div><div class='line js-file-line' id='LC125'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">t</span>.<span class="pl-c1">length</span> <span class="pl-k">===</span> <span class="pl-c1">1</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-s"><span class="pl-pds">&quot;</span>cuxDdSsWw<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">indexOf</span>(t) <span class="pl-k">&gt;</span> <span class="pl-k">-</span><span class="pl-c1">1</span>) {</div><div class='line js-file-line' id='LC126'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> <span class="pl-c1">NaN</span>;</div><div class='line js-file-line' id='LC127'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC128'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Metacharacter representing a single character index, or escaped literal character</span></div><div class='line js-file-line' id='LC129'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">t</span>.<span class="pl-c1">length</span> <span class="pl-k">===</span> <span class="pl-c1">1</span>) {</div><div class='line js-file-line' id='LC130'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">switch</span> (t) {</div><div class='line js-file-line' id='LC131'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>b<span class="pl-pds">&quot;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">8</span>;  <span class="pl-c"><span class="pl-c">//</span> Backspace</span></div><div class='line js-file-line' id='LC132'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">12</span>; <span class="pl-c"><span class="pl-c">//</span> Form feed</span></div><div class='line js-file-line' id='LC133'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>n<span class="pl-pds">&quot;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">10</span>; <span class="pl-c"><span class="pl-c">//</span> Line feed</span></div><div class='line js-file-line' id='LC134'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>r<span class="pl-pds">&quot;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">13</span>; <span class="pl-c"><span class="pl-c">//</span> Carriage return</span></div><div class='line js-file-line' id='LC135'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>t<span class="pl-pds">&quot;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">9</span>;  <span class="pl-c"><span class="pl-c">//</span> Horizontal tab</span></div><div class='line js-file-line' id='LC136'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&quot;</span>v<span class="pl-pds">&quot;</span></span>: <span class="pl-k">return</span> <span class="pl-c1">11</span>; <span class="pl-c"><span class="pl-c">//</span> Vertical tab</span></div><div class='line js-file-line' id='LC137'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">default</span> : <span class="pl-k">return</span> <span class="pl-smi">t</span>.<span class="pl-c1">charCodeAt</span>(<span class="pl-c1">0</span>); <span class="pl-c"><span class="pl-c">//</span> Escaped literal character</span></div><div class='line js-file-line' id='LC138'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC139'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC140'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC141'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Unescaped literal token(s)</span></div><div class='line js-file-line' id='LC142'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (token <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span><span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC143'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> <span class="pl-smi">token</span>.<span class="pl-c1">charCodeAt</span>(<span class="pl-c1">0</span>);</div><div class='line js-file-line' id='LC144'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC145'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> <span class="pl-c1">NaN</span>;</div><div class='line js-file-line' id='LC146'>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC147'><br></div><div class='line js-file-line' id='LC148'><span class="pl-c"><span class="pl-c">/**</span></span></div><div class='line js-file-line' id='LC149'><span class="pl-c"> * Applies regex syntax highlighting to the provided character class. Character classes have their</span></div><div class='line js-file-line' id='LC150'><span class="pl-c"> * own syntax rules which are different (sometimes quite subtly) from surrounding regex syntax.</span></div><div class='line js-file-line' id='LC151'><span class="pl-c"> * Hence, they&#39;re treated as a single token and parsed separately.</span></div><div class='line js-file-line' id='LC152'><span class="pl-c"> * <span class="pl-k">@private</span></span></div><div class='line js-file-line' id='LC153'><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{String}</span> <span class="pl-smi">value</span> Character class pattern to be colorized.</span></div><div class='line js-file-line' id='LC154'><span class="pl-c"> * <span class="pl-k">@returns</span> <span class="pl-en">{String}</span> HTML for displaying the character class with syntax highlighting.</span></div><div class='line js-file-line' id='LC155'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC156'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">function</span> <span class="pl-en">parseCharClass</span>(<span class="pl-smi">value</span>) {</div><div class='line js-file-line' id='LC157'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> output <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC158'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts <span class="pl-k">=</span> <span class="pl-smi">charClassParts</span>.<span class="pl-c1">exec</span>(value),</div><div class='line js-file-line' id='LC159'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC160'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rangeable<span class="pl-k">:</span> <span class="pl-c1">false</span>,</div><div class='line js-file-line' id='LC161'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type<span class="pl-k">:</span> <span class="pl-smi">type</span>.<span class="pl-c1">NONE</span></div><div class='line js-file-line' id='LC162'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</div><div class='line js-file-line' id='LC163'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match, m;</div><div class='line js-file-line' id='LC164'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC165'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opening<span class="pl-k">:</span> parts[<span class="pl-c1">1</span>],</div><div class='line js-file-line' id='LC166'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content<span class="pl-k">:</span> parts[<span class="pl-c1">2</span>],</div><div class='line js-file-line' id='LC167'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closing<span class="pl-k">:</span> parts[<span class="pl-c1">3</span>]</div><div class='line js-file-line' id='LC168'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC169'><br></div><div class='line js-file-line' id='LC170'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-smi">parts</span>.<span class="pl-smi">closing</span> <span class="pl-k">?</span> <span class="pl-smi">parts</span>.<span class="pl-smi">opening</span> <span class="pl-k">:</span> <span class="pl-en">errorize</span>(<span class="pl-smi">parts</span>.<span class="pl-smi">opening</span>, <span class="pl-smi">error</span>.<span class="pl-c1">UNCLOSED_CLASS</span>);</div><div class='line js-file-line' id='LC171'><br></div><div class='line js-file-line' id='LC172'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> The charClassToken regex does most of the tokenization grunt work</span></div><div class='line js-file-line' id='LC173'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">while</span> (match <span class="pl-k">=</span> <span class="pl-smi">charClassToken</span>.<span class="pl-c1">exec</span>(<span class="pl-smi">parts</span>.<span class="pl-c1">content</span>)) {</div><div class='line js-file-line' id='LC174'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m <span class="pl-k">=</span> match[<span class="pl-c1">0</span>];</div><div class='line js-file-line' id='LC175'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Escape</span></div><div class='line js-file-line' id='LC176'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">m</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>) <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span><span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC177'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">/*</span> Inside character classes, browsers differ on how they handle the following:</span></div><div class='line js-file-line' id='LC178'><span class="pl-c">                 * - Any representation of character index zero (\0, \00, \000, \x00, \u0000).</span></div><div class='line js-file-line' id='LC179'><span class="pl-c">                 * - &quot;\c&quot;, when not followed by A-Z or a-z.</span></div><div class='line js-file-line' id='LC180'><span class="pl-c">                 * - &quot;\x&quot;, when not followed by two hex characters.</span></div><div class='line js-file-line' id='LC181'><span class="pl-c">                 * - &quot;\u&quot;, when not followed by four hex characters.</span></div><div class='line js-file-line' id='LC182'><span class="pl-c">                 * However, although representations of character index zero within character</span></div><div class='line js-file-line' id='LC183'><span class="pl-c">                 * classes don&#39;t work on their own in Firefox, they don&#39;t throw an error, they work</span></div><div class='line js-file-line' id='LC184'><span class="pl-c">                 * when used with ranges, and it&#39;s highly unlikely that the user will actually have</span></div><div class='line js-file-line' id='LC185'><span class="pl-c">                 * such a character in their test data, so such tokens are highlighted normally.</span></div><div class='line js-file-line' id='LC186'><span class="pl-c">                 * The remaining metasequences are flagged as errors.</span></div><div class='line js-file-line' id='LC187'><span class="pl-c">                 <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC188'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-cce">\\</span><span class="pl-c1">[cux]</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">test</span>(m)) {</div><div class='line js-file-line' id='LC189'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(m, <span class="pl-smi">error</span>.<span class="pl-c1">INCOMPLETE_TOKEN</span>);</div><div class='line js-file-line' id='LC190'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {rangeable<span class="pl-k">:</span> <span class="pl-smi">lastToken</span>.<span class="pl-c1">type</span> <span class="pl-k">!==</span> <span class="pl-smi">type</span>.<span class="pl-c1">RANGE_HYPHEN</span>};</div><div class='line js-file-line' id='LC191'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Shorthand class (matches more than one character index)</span></div><div class='line js-file-line' id='LC192'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-cce">\\</span><span class="pl-c1">[dsw]</span><span class="pl-k">$</span><span class="pl-pds">/</span>i</span>.<span class="pl-c1">test</span>(m)) {</div><div class='line js-file-line' id='LC193'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;b&gt;<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> m <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/b&gt;<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC194'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">/*</span> Traditional regex behavior is that a shorthand class should be unrangeable.</span></div><div class='line js-file-line' id='LC195'><span class="pl-c">                     * Hence, [-\dz], [\d-z], and [z-\d] should all be equivalent. However, at</span></div><div class='line js-file-line' id='LC196'><span class="pl-c">                     * least some browsers handle this inconsistently. E.g., Firefox 2 throws an</span></div><div class='line js-file-line' id='LC197'><span class="pl-c">                     * invalid range error for [z-\d] and [\d--].</span></div><div class='line js-file-line' id='LC198'><span class="pl-c">                     <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC199'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC200'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rangeable<span class="pl-k">:</span> <span class="pl-smi">lastToken</span>.<span class="pl-c1">type</span> <span class="pl-k">!==</span> <span class="pl-smi">type</span>.<span class="pl-c1">RANGE_HYPHEN</span>,</div><div class='line js-file-line' id='LC201'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type<span class="pl-k">:</span> <span class="pl-smi">type</span>.<span class="pl-c1">SHORT_CLASS</span></div><div class='line js-file-line' id='LC202'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC203'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Unescaped &quot;\&quot; at the end of the regex</span></div><div class='line js-file-line' id='LC204'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (m <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span><span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC205'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(m, <span class="pl-smi">error</span>.<span class="pl-c1">INCOMPLETE_TOKEN</span>);</div><div class='line js-file-line' id='LC206'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Don&#39;t need to set lastToken since this is the end of the line</span></div><div class='line js-file-line' id='LC207'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Metasequence representing a single character index, or escaped literal character</span></div><div class='line js-file-line' id='LC208'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC209'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;b&gt;<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-en">expandHtmlEntities</span>(m) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/b&gt;<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC210'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC211'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rangeable<span class="pl-k">:</span> <span class="pl-smi">lastToken</span>.<span class="pl-c1">type</span> <span class="pl-k">!==</span> <span class="pl-smi">type</span>.<span class="pl-c1">RANGE_HYPHEN</span>,</div><div class='line js-file-line' id='LC212'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;charCode<span class="pl-k">:</span> <span class="pl-en">getTokenCharCode</span>(m)</div><div class='line js-file-line' id='LC213'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC214'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC215'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Hyphen (might indicate a range)</span></div><div class='line js-file-line' id='LC216'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (m <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>-<span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC217'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">lastToken</span>.<span class="pl-smi">rangeable</span>) {</div><div class='line js-file-line' id='LC218'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Save the regex&#39;s lastIndex so we can reset it after checking the next token</span></div><div class='line js-file-line' id='LC219'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> lastIndex <span class="pl-k">=</span> <span class="pl-smi">charClassToken</span>.<span class="pl-c1">lastIndex</span>,</div><div class='line js-file-line' id='LC220'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextToken <span class="pl-k">=</span> <span class="pl-smi">charClassToken</span>.<span class="pl-c1">exec</span>(<span class="pl-smi">parts</span>.<span class="pl-c1">content</span>);</div><div class='line js-file-line' id='LC221'><br></div><div class='line js-file-line' id='LC222'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (nextToken) {</div><div class='line js-file-line' id='LC223'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> nextTokenCharCode <span class="pl-k">=</span> <span class="pl-en">getTokenCharCode</span>(nextToken[<span class="pl-c1">0</span>]);</div><div class='line js-file-line' id='LC224'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Hypen for a reverse range (e.g., z-a) or shorthand class (e.g., \d-x or x-\S)</span></div><div class='line js-file-line' id='LC225'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (</div><div class='line js-file-line' id='LC226'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span class="pl-k">!</span><span class="pl-c1">isNaN</span>(nextTokenCharCode) <span class="pl-k">&amp;&amp;</span> <span class="pl-smi">lastToken</span>.<span class="pl-smi">charCode</span> <span class="pl-k">&gt;</span> nextTokenCharCode) <span class="pl-k">||</span></div><div class='line js-file-line' id='LC227'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">lastToken</span>.<span class="pl-c1">type</span> <span class="pl-k">===</span> <span class="pl-smi">type</span>.<span class="pl-c1">SHORT_CLASS</span> <span class="pl-k">||</span></div><div class='line js-file-line' id='LC228'><span class="pl-sr">                            <span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-cce">\\</span><span class="pl-c1">[dsw]</span><span class="pl-k">$</span><span class="pl-pds">/</span>i</span>.<span class="pl-c1">test</span>(nextToken[<span class="pl-c1">0</span>])</div><div class='line js-file-line' id='LC229'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) {</div><div class='line js-file-line' id='LC230'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>-<span class="pl-pds">&quot;</span></span>, <span class="pl-smi">error</span>.<span class="pl-c1">INVALID_RANGE</span>);</div><div class='line js-file-line' id='LC231'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Hyphen creating a valid range</span></div><div class='line js-file-line' id='LC232'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC233'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;u&gt;-&lt;/u&gt;<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC234'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC235'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC236'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rangeable<span class="pl-k">:</span> <span class="pl-c1">false</span>,</div><div class='line js-file-line' id='LC237'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type<span class="pl-k">:</span> <span class="pl-smi">type</span>.<span class="pl-c1">RANGE_HYPHEN</span></div><div class='line js-file-line' id='LC238'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC239'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC240'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Hyphen at the end of a properly closed character class (literal character)</span></div><div class='line js-file-line' id='LC241'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">parts</span>.<span class="pl-smi">closing</span>) {</div><div class='line js-file-line' id='LC242'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>-<span class="pl-pds">&quot;</span></span>; <span class="pl-c"><span class="pl-c">//</span> Since this is a literal, it&#39;s technically &quot;rangeable&quot;, but that doesn&#39;t matter</span></div><div class='line js-file-line' id='LC243'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Hyphen at the end of an unclosed character class (i.e., the end of the regex)</span></div><div class='line js-file-line' id='LC244'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC245'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;u&gt;-&lt;/u&gt;<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC246'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC247'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC248'><br></div><div class='line js-file-line' id='LC249'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Reset the regex&#39;s lastIndex so the next while loop iteration will continue appropriately</span></div><div class='line js-file-line' id='LC250'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">charClassToken</span>.<span class="pl-c1">lastIndex</span> <span class="pl-k">=</span> lastIndex;</div><div class='line js-file-line' id='LC251'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Hyphen at the beginning of a character class or after a non-rangeable token</span></div><div class='line js-file-line' id='LC252'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC253'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>-<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC254'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {rangeable<span class="pl-k">:</span> <span class="pl-smi">lastToken</span>.<span class="pl-c1">type</span> <span class="pl-k">!==</span> <span class="pl-smi">type</span>.<span class="pl-c1">RANGE_HYPHEN</span>};</div><div class='line js-file-line' id='LC255'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC256'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Literal character sequence</span></div><div class='line js-file-line' id='LC257'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC258'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">expandHtmlEntities</span>(m);</div><div class='line js-file-line' id='LC259'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC260'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rangeable<span class="pl-k">:</span> (<span class="pl-smi">m</span>.<span class="pl-c1">length</span> <span class="pl-k">&gt;</span> <span class="pl-c1">1</span> <span class="pl-k">||</span> <span class="pl-smi">lastToken</span>.<span class="pl-c1">type</span> <span class="pl-k">!==</span> <span class="pl-smi">type</span>.<span class="pl-c1">RANGE_HYPHEN</span>),</div><div class='line js-file-line' id='LC261'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;charCode<span class="pl-k">:</span> <span class="pl-smi">m</span>.<span class="pl-c1">charCodeAt</span>(<span class="pl-smi">m</span>.<span class="pl-c1">length</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>)</div><div class='line js-file-line' id='LC262'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC263'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC264'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-c"><span class="pl-c">//</span> End charClassToken loop</span></div><div class='line js-file-line' id='LC265'><br></div><div class='line js-file-line' id='LC266'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> output <span class="pl-k">+</span> <span class="pl-smi">parts</span>.<span class="pl-smi">closing</span>;</div><div class='line js-file-line' id='LC267'>&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC268'><br></div><div class='line js-file-line' id='LC269'><span class="pl-c"><span class="pl-c">/*</span>--------------------------------------</span></div><div class='line js-file-line' id='LC270'><span class="pl-c"> *  Public methods</span></div><div class='line js-file-line' id='LC271'><span class="pl-c"> *------------------------------------<span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC272'><br></div><div class='line js-file-line' id='LC273'><span class="pl-c"><span class="pl-c">/**</span></span></div><div class='line js-file-line' id='LC274'><span class="pl-c"> * Applies regex syntax highlighting to the provided regex pattern string.</span></div><div class='line js-file-line' id='LC275'><span class="pl-c"> * @memberOf RegexColorizer</span></div><div class='line js-file-line' id='LC276'><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{String}</span> <span class="pl-smi">pattern</span> Regex pattern to be colorized.</span></div><div class='line js-file-line' id='LC277'><span class="pl-c"> * <span class="pl-k">@returns</span> <span class="pl-en">{String}</span> HTML for displaying the regex with syntax highlighting.</span></div><div class='line js-file-line' id='LC278'><span class="pl-c"> * <span class="pl-k">@example</span></span></div><div class='line js-file-line' id='LC279'><span class="pl-c"> *</span></div><div class='line js-file-line' id='LC280'><span class="pl-c"> * <span class="pl-s1"><span class="pl-smi">RegexColorizer</span>.<span class="pl-en">colorizeText</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>^regexp? pattern$<span class="pl-pds">&#39;</span></span>);</span></span></div><div class='line js-file-line' id='LC281'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC282'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">self</span>.<span class="pl-en">colorizeText</span> <span class="pl-k">=</span> <span class="pl-k">function</span> (<span class="pl-smi">pattern</span>) {</div><div class='line js-file-line' id='LC283'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> output <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC284'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;capturingGroupCount <span class="pl-k">=</span> <span class="pl-c1">0</span>,</div><div class='line js-file-line' id='LC285'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;groupStyleDepth <span class="pl-k">=</span> <span class="pl-c1">0</span>,</div><div class='line js-file-line' id='LC286'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;openGroups <span class="pl-k">=</span> [],</div><div class='line js-file-line' id='LC287'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC288'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quantifiable<span class="pl-k">:</span> <span class="pl-c1">false</span>,</div><div class='line js-file-line' id='LC289'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type<span class="pl-k">:</span> <span class="pl-smi">type</span>.<span class="pl-c1">NONE</span></div><div class='line js-file-line' id='LC290'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</div><div class='line js-file-line' id='LC291'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match, m, char0, char1;</div><div class='line js-file-line' id='LC292'><br></div><div class='line js-file-line' id='LC293'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">while</span> (match <span class="pl-k">=</span> <span class="pl-smi">regexToken</span>.<span class="pl-c1">exec</span>(pattern)) {</div><div class='line js-file-line' id='LC294'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m <span class="pl-k">=</span> match[<span class="pl-c1">0</span>];</div><div class='line js-file-line' id='LC295'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char0 <span class="pl-k">=</span> <span class="pl-smi">m</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">0</span>);</div><div class='line js-file-line' id='LC296'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char1 <span class="pl-k">=</span> <span class="pl-smi">m</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">1</span>);</div><div class='line js-file-line' id='LC297'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Character class</span></div><div class='line js-file-line' id='LC298'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (char0 <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>[<span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC299'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;i&gt;<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-en">parseCharClass</span>(m) <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/i&gt;<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC300'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">true</span>};</div><div class='line js-file-line' id='LC301'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Group opening</span></div><div class='line js-file-line' id='LC302'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (char0 <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>(<span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC303'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> If this is an invalid group type, mark the error and don&#39;t count it towards</span></div><div class='line js-file-line' id='LC304'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> group depth or total count</span></div><div class='line js-file-line' id='LC305'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">m</span>.<span class="pl-c1">length</span> <span class="pl-k">===</span> <span class="pl-c1">2</span>) { <span class="pl-c"><span class="pl-c">//</span> m is &quot;(?&quot;</span></div><div class='line js-file-line' id='LC306'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(m, <span class="pl-smi">error</span>.<span class="pl-c1">INVALID_GROUP_TYPE</span>);</div><div class='line js-file-line' id='LC307'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC308'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">m</span>.<span class="pl-c1">length</span> <span class="pl-k">===</span> <span class="pl-c1">1</span>) {</div><div class='line js-file-line' id='LC309'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;capturingGroupCount<span class="pl-k">++</span>;</div><div class='line js-file-line' id='LC310'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC311'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;groupStyleDepth <span class="pl-k">=</span> groupStyleDepth <span class="pl-k">===</span> <span class="pl-c1">5</span> <span class="pl-k">?</span> <span class="pl-c1">1</span> <span class="pl-k">:</span> groupStyleDepth <span class="pl-k">+</span> <span class="pl-c1">1</span>;</div><div class='line js-file-line' id='LC312'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">/*</span> Record the group opening&#39;s position and character sequence so we can later</span></div><div class='line js-file-line' id='LC313'><span class="pl-c">                     * mark it as invalid if it turns out to be unclosed in the remainder of the</span></div><div class='line js-file-line' id='LC314'><span class="pl-c">                     * regex. The value of index is the position plus the length of the opening &lt;b&gt;</span></div><div class='line js-file-line' id='LC315'><span class="pl-c">                     * element with group-depth class.</span></div><div class='line js-file-line' id='LC316'><span class="pl-c">                     <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC317'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">openGroups</span>.<span class="pl-c1">push</span>({</div><div class='line js-file-line' id='LC318'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index<span class="pl-k">:</span> <span class="pl-smi">output</span>.<span class="pl-c1">length</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&lt;b class=&quot;gN&quot;&gt;<span class="pl-pds">&#39;</span></span>.<span class="pl-c1">length</span>,</div><div class='line js-file-line' id='LC319'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opening<span class="pl-k">:</span> m</div><div class='line js-file-line' id='LC320'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</div><div class='line js-file-line' id='LC321'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Add markup to the group-opening character sequence</span></div><div class='line js-file-line' id='LC322'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">groupize</span>(m, groupStyleDepth);</div><div class='line js-file-line' id='LC323'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC324'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">false</span>};</div><div class='line js-file-line' id='LC325'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Group closing</span></div><div class='line js-file-line' id='LC326'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (char0 <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC327'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> If this is an invalid group closing</span></div><div class='line js-file-line' id='LC328'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-k">!</span><span class="pl-smi">openGroups</span>.<span class="pl-c1">length</span>) {</div><div class='line js-file-line' id='LC329'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>, <span class="pl-smi">error</span>.<span class="pl-c1">UNBALANCED_RIGHT_PAREN</span>);</div><div class='line js-file-line' id='LC330'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">false</span>};</div><div class='line js-file-line' id='LC331'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC332'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">groupize</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span>, groupStyleDepth);</div><div class='line js-file-line' id='LC333'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">/*</span> Although at least in some browsers it is possible to quantify lookaheads,</span></div><div class='line js-file-line' id='LC334'><span class="pl-c">                     * this adds no value, doesn&#39;t work as you&#39;d expect in JavaScript, and is an</span></div><div class='line js-file-line' id='LC335'><span class="pl-c">                     * error with some regex flavors such as PCRE (also ES5?), so flag them as</span></div><div class='line js-file-line' id='LC336'><span class="pl-c">                     * unquantifiable.</span></div><div class='line js-file-line' id='LC337'><span class="pl-c">                     <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC338'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC339'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quantifiable<span class="pl-k">:</span> <span class="pl-k">!</span><span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[=!]</span><span class="pl-pds">/</span></span>.<span class="pl-c1">test</span>(openGroups[<span class="pl-smi">openGroups</span>.<span class="pl-c1">length</span> <span class="pl-k">-</span> <span class="pl-c1">1</span>].<span class="pl-smi">opening</span>.<span class="pl-c1">charAt</span>(<span class="pl-c1">2</span>)),</div><div class='line js-file-line' id='LC340'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>g<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> groupStyleDepth</div><div class='line js-file-line' id='LC341'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC342'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;groupStyleDepth <span class="pl-k">=</span> groupStyleDepth <span class="pl-k">===</span> <span class="pl-c1">1</span> <span class="pl-k">?</span> <span class="pl-c1">5</span> <span class="pl-k">:</span> groupStyleDepth <span class="pl-k">-</span> <span class="pl-c1">1</span>;</div><div class='line js-file-line' id='LC343'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Drop the last opening paren from depth tracking</span></div><div class='line js-file-line' id='LC344'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">openGroups</span>.<span class="pl-c1">pop</span>();</div><div class='line js-file-line' id='LC345'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC346'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Escape or backreference</span></div><div class='line js-file-line' id='LC347'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (char0 <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span><span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC348'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Backreference or octal character code without a leading zero</span></div><div class='line js-file-line' id='LC349'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[<span class="pl-c1">1-9</span>]</span><span class="pl-pds">/</span></span>.<span class="pl-c1">test</span>(char1)) {</div><div class='line js-file-line' id='LC350'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">/*</span> What does &quot;\10&quot; mean?</span></div><div class='line js-file-line' id='LC351'><span class="pl-c">                     * - Backref 10, if 10 or more capturing groups opened before this point.</span></div><div class='line js-file-line' id='LC352'><span class="pl-c">                     * - Backref 1 followed by &quot;0&quot;, if 1-9 capturing groups opened before this point.</span></div><div class='line js-file-line' id='LC353'><span class="pl-c">                     * - Otherwise, it&#39;s octal character index 10 (since 10 is in octal range 0-377).</span></div><div class='line js-file-line' id='LC354'><span class="pl-c">                     * In the case of \8 or \9 when as many capturing groups weren&#39;t opened before</span></div><div class='line js-file-line' id='LC355'><span class="pl-c">                     * this point, they&#39;re highlighted as special tokens. However, they should</span></div><div class='line js-file-line' id='LC356'><span class="pl-c">                     * probably be marked as errors since the handling is browser-specific. E.g.,</span></div><div class='line js-file-line' id='LC357'><span class="pl-c">                     * in Firefox 2 they seem to be equivalent to &quot;(?!)&quot;, while in IE 7 they match</span></div><div class='line js-file-line' id='LC358'><span class="pl-c">                     * the literal characters &quot;8&quot; and &quot;9&quot;, which is correct handling. I don&#39;t mark</span></div><div class='line js-file-line' id='LC359'><span class="pl-c">                     * them as errors because it would seem inconsistent to users who don&#39;t</span></div><div class='line js-file-line' id='LC360'><span class="pl-c">                     * understand the highlighting rules for octals, etc. In fact, octals are not</span></div><div class='line js-file-line' id='LC361'><span class="pl-c">                     * included in ECMA-262v3, but all the big browsers support them.</span></div><div class='line js-file-line' id='LC362'><span class="pl-c">                     <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC363'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> nonBackrefDigits <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>,</div><div class='line js-file-line' id='LC364'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num <span class="pl-k">=</span> <span class="pl-k">+</span><span class="pl-smi">m</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">1</span>);</div><div class='line js-file-line' id='LC365'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">while</span> (num <span class="pl-k">&gt;</span> capturingGroupCount) {</div><div class='line js-file-line' id='LC366'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nonBackrefDigits <span class="pl-k">=</span><span class="pl-sr"> <span class="pl-pds">/</span><span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(num)[<span class="pl-c1">0</span>] <span class="pl-k">+</span> nonBackrefDigits;</div><div class='line js-file-line' id='LC367'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num <span class="pl-k">=</span> <span class="pl-c1">Math</span>.<span class="pl-c1">floor</span>(num <span class="pl-k">/</span> <span class="pl-c1">10</span>); <span class="pl-c"><span class="pl-c">//</span> Drop the last digit</span></div><div class='line js-file-line' id='LC368'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC369'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (num <span class="pl-k">&gt;</span> <span class="pl-c1">0</span>) {</div><div class='line js-file-line' id='LC370'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;b&gt;<span class="pl-cce">\\</span><span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> num <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/b&gt;<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> nonBackrefDigits;</div><div class='line js-file-line' id='LC371'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC372'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> parts <span class="pl-k">=</span><span class="pl-sr"> <span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-cce">\\</span>(<span class="pl-c1">[<span class="pl-c1">0-3</span>][<span class="pl-c1">0-7</span>]</span><span class="pl-k">{0,2}</span><span class="pl-k">|</span><span class="pl-c1">[<span class="pl-c1">4-7</span>][<span class="pl-c1">0-7</span>]</span><span class="pl-k">?</span><span class="pl-k">|</span><span class="pl-c1">[89]</span>)(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span>)<span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(m);</div><div class='line js-file-line' id='LC373'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;b&gt;<span class="pl-cce">\\</span><span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> parts[<span class="pl-c1">1</span>] <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/b&gt;<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> parts[<span class="pl-c1">2</span>];</div><div class='line js-file-line' id='LC374'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC375'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">true</span>};</div><div class='line js-file-line' id='LC376'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Metasequence</span></div><div class='line js-file-line' id='LC377'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-c1">[0bBcdDfnrsStuvwWx]</span><span class="pl-pds">/</span></span>.<span class="pl-c1">test</span>(char1)) {</div><div class='line js-file-line' id='LC378'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">/*</span> Browsers differ on how they handle:</span></div><div class='line js-file-line' id='LC379'><span class="pl-c">                     * - &quot;\c&quot;, when not followed by A-Z or a-z.</span></div><div class='line js-file-line' id='LC380'><span class="pl-c">                     * - &quot;\x&quot;, when not followed by two hex characters.</span></div><div class='line js-file-line' id='LC381'><span class="pl-c">                     * - &quot;\u&quot;, when not followed by four hex characters.</span></div><div class='line js-file-line' id='LC382'><span class="pl-c">                     * Hence, such metasequences are flagged as errors.</span></div><div class='line js-file-line' id='LC383'><span class="pl-c">                     <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC384'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-sr"><span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-cce">\\</span><span class="pl-c1">[cux]</span><span class="pl-k">$</span><span class="pl-pds">/</span></span>.<span class="pl-c1">test</span>(m)) {</div><div class='line js-file-line' id='LC385'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(m, <span class="pl-smi">error</span>.<span class="pl-c1">INCOMPLETE_TOKEN</span>);</div><div class='line js-file-line' id='LC386'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">false</span>};</div><div class='line js-file-line' id='LC387'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Unquantifiable metasequence</span></div><div class='line js-file-line' id='LC388'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>bB<span class="pl-pds">&quot;</span></span>.<span class="pl-c1">indexOf</span>(char1) <span class="pl-k">&gt;</span> <span class="pl-k">-</span><span class="pl-c1">1</span>) {</div><div class='line js-file-line' id='LC389'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;b&gt;<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> m <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/b&gt;<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC390'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">false</span>};</div><div class='line js-file-line' id='LC391'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Quantifiable metasequence</span></div><div class='line js-file-line' id='LC392'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC393'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;b&gt;<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> m <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/b&gt;<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC394'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">true</span>};</div><div class='line js-file-line' id='LC395'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC396'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Unescaped &quot;\&quot; at the end of the regex</span></div><div class='line js-file-line' id='LC397'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (m <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span><span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC398'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(m, <span class="pl-smi">error</span>.<span class="pl-c1">INCOMPLETE_TOKEN</span>);</div><div class='line js-file-line' id='LC399'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Don&#39;t need to set lastToken since this is the end of the line</span></div><div class='line js-file-line' id='LC400'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Escaped literal character</span></div><div class='line js-file-line' id='LC401'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC402'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">expandHtmlEntities</span>(m);</div><div class='line js-file-line' id='LC403'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">true</span>};</div><div class='line js-file-line' id='LC404'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC405'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Quantifier</span></div><div class='line js-file-line' id='LC406'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-smi">quantifier</span>.<span class="pl-c1">test</span>(m)) {</div><div class='line js-file-line' id='LC407'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">lastToken</span>.<span class="pl-smi">quantifiable</span>) {</div><div class='line js-file-line' id='LC408'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> interval <span class="pl-k">=</span><span class="pl-sr"> <span class="pl-pds">/</span><span class="pl-k">^</span><span class="pl-cce">\{</span>(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">+</span>)(?:,(<span class="pl-c1">[<span class="pl-c1">0-9</span>]</span><span class="pl-k">*</span>))<span class="pl-k">?</span><span class="pl-pds">/</span></span>.<span class="pl-c1">exec</span>(m);</div><div class='line js-file-line' id='LC409'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Interval quantifier out of range for Firefox</span></div><div class='line js-file-line' id='LC410'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (interval <span class="pl-k">&amp;&amp;</span> (<span class="pl-k">+</span>interval[<span class="pl-c1">1</span>] <span class="pl-k">&gt;</span> <span class="pl-c1">65535</span> <span class="pl-k">||</span> (interval[<span class="pl-c1">2</span>] <span class="pl-k">&amp;&amp;</span> <span class="pl-k">+</span>interval[<span class="pl-c1">2</span>] <span class="pl-k">&gt;</span> <span class="pl-c1">65535</span>))) {</div><div class='line js-file-line' id='LC411'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(m, <span class="pl-smi">error</span>.<span class="pl-c1">INTERVAL_OVERFLOW</span>);</div><div class='line js-file-line' id='LC412'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Interval quantifier in reverse numeric order</span></div><div class='line js-file-line' id='LC413'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (interval <span class="pl-k">&amp;&amp;</span> interval[<span class="pl-c1">2</span>] <span class="pl-k">&amp;&amp;</span> (<span class="pl-k">+</span>interval[<span class="pl-c1">1</span>] <span class="pl-k">&gt;</span> <span class="pl-k">+</span>interval[<span class="pl-c1">2</span>])) {</div><div class='line js-file-line' id='LC414'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(m, <span class="pl-smi">error</span>.<span class="pl-c1">INTERVAL_REVERSED</span>);</div><div class='line js-file-line' id='LC415'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC416'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Quantifiers for groups are shown in the style of the (preceeding) group&#39;s depth</span></div><div class='line js-file-line' id='LC417'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> (<span class="pl-smi">lastToken</span>.<span class="pl-c1">style</span> <span class="pl-k">?</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&lt;b class=&quot;<span class="pl-pds">&#39;</span></span> <span class="pl-k">+</span> <span class="pl-smi">lastToken</span>.<span class="pl-c1">style</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;&gt;<span class="pl-pds">&#39;</span></span> <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&lt;b&gt;<span class="pl-pds">&#39;</span></span>) <span class="pl-k">+</span> m <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&lt;/b&gt;<span class="pl-pds">&#39;</span></span>;</div><div class='line js-file-line' id='LC418'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC419'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC420'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(m, <span class="pl-smi">error</span>.<span class="pl-c1">UNQUANTIFIABLE</span>);</div><div class='line js-file-line' id='LC421'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC422'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">false</span>};</div><div class='line js-file-line' id='LC423'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Vertical bar (alternator)</span></div><div class='line js-file-line' id='LC424'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (m <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>|<span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC425'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">/*</span> If there is a vertical bar at the very start of the regex, flag it as an error</span></div><div class='line js-file-line' id='LC426'><span class="pl-c">                 * since it effectively truncates the regex at that point. If two top-level</span></div><div class='line js-file-line' id='LC427'><span class="pl-c">                 * vertical bars are next to each other, flag it as an error for similar reasons.</span></div><div class='line js-file-line' id='LC428'><span class="pl-c">                 <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC429'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">lastToken</span>.<span class="pl-c1">type</span> <span class="pl-k">===</span> <span class="pl-smi">type</span>.<span class="pl-c1">NONE</span> <span class="pl-k">||</span> (<span class="pl-smi">lastToken</span>.<span class="pl-c1">type</span> <span class="pl-k">===</span> <span class="pl-smi">type</span>.<span class="pl-c1">ALTERNATOR</span> <span class="pl-k">&amp;&amp;</span> <span class="pl-k">!</span><span class="pl-smi">openGroups</span>.<span class="pl-c1">length</span>)) {</div><div class='line js-file-line' id='LC430'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(m, <span class="pl-smi">error</span>.<span class="pl-c1">IMPROPER_EMPTY_ALTERNATIVE</span>);</div><div class='line js-file-line' id='LC431'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC432'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Alternators within groups are shown in the style of the containing group&#39;s depth</span></div><div class='line js-file-line' id='LC433'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-smi">openGroups</span>.<span class="pl-c1">length</span> <span class="pl-k">?</span> <span class="pl-en">groupize</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>|<span class="pl-pds">&quot;</span></span>, groupStyleDepth) <span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;b&gt;|&lt;/b&gt;<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC434'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC435'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {</div><div class='line js-file-line' id='LC436'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quantifiable<span class="pl-k">:</span> <span class="pl-c1">false</span>,</div><div class='line js-file-line' id='LC437'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type<span class="pl-k">:</span> <span class="pl-smi">type</span>.<span class="pl-c1">ALTERNATOR</span></div><div class='line js-file-line' id='LC438'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC439'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> ^ or $ anchor</span></div><div class='line js-file-line' id='LC440'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (m <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>^<span class="pl-pds">&quot;</span></span> <span class="pl-k">||</span> m <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>$<span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC441'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;b&gt;<span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> m <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;/b&gt;<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC442'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">false</span>};</div><div class='line js-file-line' id='LC443'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Dot (.)</span></div><div class='line js-file-line' id='LC444'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> <span class="pl-k">if</span> (m <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span>) {</div><div class='line js-file-line' id='LC445'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>&lt;b&gt;.&lt;/b&gt;<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC446'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">true</span>};</div><div class='line js-file-line' id='LC447'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Literal character sequence</span></div><div class='line js-file-line' id='LC448'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC449'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">+=</span> <span class="pl-en">expandHtmlEntities</span>(m);</div><div class='line js-file-line' id='LC450'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastToken <span class="pl-k">=</span> {quantifiable<span class="pl-k">:</span> <span class="pl-c1">true</span>};</div><div class='line js-file-line' id='LC451'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC452'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-c"><span class="pl-c">//</span> End regexToken loop</span></div><div class='line js-file-line' id='LC453'><br></div><div class='line js-file-line' id='LC454'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Mark the opening character sequence for each unclosed grouping as invalid</span></div><div class='line js-file-line' id='LC455'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> numCharsAdded <span class="pl-k">=</span> <span class="pl-c1">0</span>, errorIndex, i;</div><div class='line js-file-line' id='LC456'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> (i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-smi">openGroups</span>.<span class="pl-c1">length</span>; i<span class="pl-k">++</span>) {</div><div class='line js-file-line' id='LC457'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorIndex <span class="pl-k">=</span> openGroups[i].<span class="pl-c1">index</span> <span class="pl-k">+</span> numCharsAdded;</div><div class='line js-file-line' id='LC458'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output <span class="pl-k">=</span> (</div><div class='line js-file-line' id='LC459'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">output</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">0</span>, errorIndex) <span class="pl-k">+</span></div><div class='line js-file-line' id='LC460'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-en">errorize</span>(openGroups[i].<span class="pl-smi">opening</span>, <span class="pl-smi">error</span>.<span class="pl-c1">UNBALANCED_LEFT_PAREN</span>) <span class="pl-k">+</span></div><div class='line js-file-line' id='LC461'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">output</span>.<span class="pl-c1">slice</span>(errorIndex <span class="pl-k">+</span> openGroups[i].<span class="pl-smi">opening</span>.<span class="pl-c1">length</span>)</div><div class='line js-file-line' id='LC462'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);</div><div class='line js-file-line' id='LC463'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numCharsAdded <span class="pl-k">+=</span> <span class="pl-en">errorize</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, <span class="pl-smi">error</span>.<span class="pl-c1">UNBALANCED_LEFT_PAREN</span>).<span class="pl-c1">length</span>;</div><div class='line js-file-line' id='LC464'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC465'><br></div><div class='line js-file-line' id='LC466'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> output;</div><div class='line js-file-line' id='LC467'>&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC468'><br></div><div class='line js-file-line' id='LC469'><span class="pl-c"><span class="pl-c">/**</span></span></div><div class='line js-file-line' id='LC470'><span class="pl-c"> * Applies regex syntax highlighting to all elements on the page with the specified class.</span></div><div class='line js-file-line' id='LC471'><span class="pl-c"> * @memberOf RegexColorizer</span></div><div class='line js-file-line' id='LC472'><span class="pl-c"> * <span class="pl-k">@param</span> <span class="pl-en">{String}</span> <span class="pl-smi">[cls<span class="pl-k">=</span><span class="pl-s1"><span class="pl-s"><span class="pl-pds">&#39;</span>regex<span class="pl-pds">&#39;</span></span></span>]</span> Class name used by elements to be colorized.</span></div><div class='line js-file-line' id='LC473'><span class="pl-c"> * <span class="pl-k">@example</span></span></div><div class='line js-file-line' id='LC474'><span class="pl-c"> *</span></div><div class='line js-file-line' id='LC475'><span class="pl-c"> * <span class="pl-s1"><span class="pl-c"><span class="pl-c">//</span> Basic use</span></span></span></div><div class='line js-file-line' id='LC476'><span class="pl-c"> * <span class="pl-s1"><span class="pl-smi">RegexColorizer</span>.<span class="pl-en">colorizeAll</span>();</span></span></div><div class='line js-file-line' id='LC477'><span class="pl-c"> *</span></div><div class='line js-file-line' id='LC478'><span class="pl-c"> * <span class="pl-s1"><span class="pl-c"><span class="pl-c">//</span> With class name</span></span></span></div><div class='line js-file-line' id='LC479'><span class="pl-c"> * <span class="pl-s1"><span class="pl-smi">RegexColorizer</span>.<span class="pl-en">colorizeAll</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>my-class<span class="pl-pds">&#39;</span></span>);</span></span></div><div class='line js-file-line' id='LC480'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC481'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">self</span>.<span class="pl-en">colorizeAll</span> <span class="pl-k">=</span> <span class="pl-k">function</span> (<span class="pl-smi">cls</span>) {</div><div class='line js-file-line' id='LC482'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cls <span class="pl-k">=</span> cls <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">&quot;</span>regex<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC483'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> els <span class="pl-k">=</span> <span class="pl-en">elsByClass</span>(cls),</div><div class='line js-file-line' id='LC484'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len <span class="pl-k">=</span> <span class="pl-smi">els</span>.<span class="pl-c1">length</span>,</div><div class='line js-file-line' id='LC485'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;el, i;</div><div class='line js-file-line' id='LC486'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">for</span> (i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> len; i<span class="pl-k">++</span>) {</div><div class='line js-file-line' id='LC487'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;el <span class="pl-k">=</span> els[i];</div><div class='line js-file-line' id='LC488'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">el</span>.<span class="pl-smi">innerHTML</span> <span class="pl-k">=</span> <span class="pl-smi">self</span>.<span class="pl-en">colorizeText</span>(<span class="pl-smi">el</span>.<span class="pl-smi">textContent</span> <span class="pl-k">||</span> <span class="pl-smi">el</span>.<span class="pl-smi">innerText</span>);</div><div class='line js-file-line' id='LC489'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC490'>&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC491'><br></div><div class='line js-file-line' id='LC492'><span class="pl-c"><span class="pl-c">/**</span></span></div><div class='line js-file-line' id='LC493'><span class="pl-c"> * Adds a stylesheet with the default regex highlighting styles to the page. If you provide your</span></div><div class='line js-file-line' id='LC494'><span class="pl-c"> * own stylesheet, you don&#39;t need to run this.</span></div><div class='line js-file-line' id='LC495'><span class="pl-c"> * @memberOf RegexColorizer</span></div><div class='line js-file-line' id='LC496'><span class="pl-c"> * <span class="pl-k">@example</span></span></div><div class='line js-file-line' id='LC497'><span class="pl-c"> *</span></div><div class='line js-file-line' id='LC498'><span class="pl-c"> * <span class="pl-s1"><span class="pl-smi">RegexColorizer</span>.<span class="pl-en">addStyleSheet</span>();</span></span></div><div class='line js-file-line' id='LC499'><span class="pl-c"> <span class="pl-c">*/</span></span></div><div class='line js-file-line' id='LC500'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">self</span>.<span class="pl-en">addStyleSheet</span> <span class="pl-k">=</span> <span class="pl-k">function</span> () {</div><div class='line js-file-line' id='LC501'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">var</span> ss <span class="pl-k">=</span> <span class="pl-c1">document</span>.<span class="pl-c1">createElement</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>style<span class="pl-pds">&quot;</span></span>),</div><div class='line js-file-line' id='LC502'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rules <span class="pl-k">=</span></div><div class='line js-file-line' id='LC503'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex       {font-family: Monospace;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span></div><div class='line js-file-line' id='LC504'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex b     {background: #aad1f7;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c"><span class="pl-c">//</span> metasequence</span></div><div class='line js-file-line' id='LC505'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex i     {background: #e3e3e3;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c"><span class="pl-c">//</span> char class</span></div><div class='line js-file-line' id='LC506'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex i b   {background: #9fb6dc;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c"><span class="pl-c">//</span> char class: metasequence</span></div><div class='line js-file-line' id='LC507'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex i u   {background: #c3c3c3;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c"><span class="pl-c">//</span> char class: range-hyphen</span></div><div class='line js-file-line' id='LC508'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex b.g1  {background: #b4fa50; color: #000;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c"><span class="pl-c">//</span> group: depth 1</span></div><div class='line js-file-line' id='LC509'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex b.g2  {background: #8cd400; color: #000;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c"><span class="pl-c">//</span> group: depth 2</span></div><div class='line js-file-line' id='LC510'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex b.g3  {background: #26b809; color: #fff;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c"><span class="pl-c">//</span> group: depth 3</span></div><div class='line js-file-line' id='LC511'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex b.g4  {background: #30ea60; color: #000;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c"><span class="pl-c">//</span> group: depth 4</span></div><div class='line js-file-line' id='LC512'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex b.g5  {background: #0c8d15; color: #fff;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c"><span class="pl-c">//</span> group: depth 5</span></div><div class='line js-file-line' id='LC513'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex b.err {background: #e30000; color: #fff;} <span class="pl-pds">&quot;</span></span> <span class="pl-k">+</span> <span class="pl-c"><span class="pl-c">//</span> error</span></div><div class='line js-file-line' id='LC514'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-s"><span class="pl-pds">&quot;</span>.regex b, .regex i, .regex u {font-weight: normal; font-style: normal; text-decoration: none;}<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC515'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">ss</span>.<span class="pl-c1">id</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">&quot;</span>regex-colorizer-ss<span class="pl-pds">&quot;</span></span>;</div><div class='line js-file-line' id='LC516'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Need to add to the DOM before setting cssText for IE &lt; 9</span></div><div class='line js-file-line' id='LC517'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c1">document</span>.<span class="pl-c1">getElementsByTagName</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>head<span class="pl-pds">&quot;</span></span>)[<span class="pl-c1">0</span>].<span class="pl-c1">appendChild</span>(ss);</div><div class='line js-file-line' id='LC518'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-c"><span class="pl-c">//</span> Can&#39;t use innerHTML or innerText for stylesheets in IE &lt; 9</span></div><div class='line js-file-line' id='LC519'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">if</span> (<span class="pl-smi">ss</span>.<span class="pl-smi">styleSheet</span>) {</div><div class='line js-file-line' id='LC520'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">ss</span>.<span class="pl-smi">styleSheet</span>.<span class="pl-smi">cssText</span> <span class="pl-k">=</span> rules;</div><div class='line js-file-line' id='LC521'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <span class="pl-k">else</span> {</div><div class='line js-file-line' id='LC522'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-smi">ss</span>.<span class="pl-smi">innerHTML</span> <span class="pl-k">=</span> rules;</div><div class='line js-file-line' id='LC523'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</div><div class='line js-file-line' id='LC524'>&nbsp;&nbsp;&nbsp;&nbsp;};</div><div class='line js-file-line' id='LC525'><br></div><div class='line js-file-line' id='LC526'>&nbsp;&nbsp;&nbsp;&nbsp;<span class="pl-k">return</span> self;</div><div class='line js-file-line' id='LC527'><br></div><div class='line js-file-line' id='LC528'>}());</div></pre></div></div>
    </div>
</div>


  <footer class="clearfix">
    <div class="container">
      <a href="#"><svg height="32" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="32" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg></a>

      <ul class="clearfix">
        <li>
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-mobile-preference-form" action="/site/mobile_preference" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="&#x2713;" /><input type="hidden" name="authenticity_token" value="mckiw3TYV4jyQCo6H1ovoF8klXLT6fk+lMF+EvsqokF5woXW/FWNVGtbXJp0zyEIYX+OofKIZ2r/xP5AVf66cg==" />
            <input type="hidden" name="mobile" value="false">
            <input type="hidden" name="anchor" class="js-mobile-preference-anchor-field">

            <button type="submit" class="switch-to-desktop" data-ga-click="Mobile, switch to desktop, switch button">
              Desktop version
            </button>
</form>        </li>
        <li>
          <a href="/logout" data-ga-click="Mobile, tap, location:header; text:Sign out">
            Sign out
          </a>
        </li>
      </ul>
    </div>
  </footer>
  
    <script crossorigin="anonymous" async="async" integrity="sha512-TSkT7uWn3qwHXREMJeLmITonJpbvizVD2TXpfm3z1PX0GyhxLrfLl3ePuUkFA/eIaH3vPk7wajo/RMPfxrMF9Q==" type="application/javascript" src="https://github.githubassets.com/assets/mobile-bootstrap-1b659eb1.js"></script>

  </body>
</html>
